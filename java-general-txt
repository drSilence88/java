Exception is an unwanted or unexpected event, which occurs during the execution of a program
Major reasons why an exception Occurs:
Invalid user input
Device failure
Loss of network connection
Physical limitations (out of disk memory)
Code errors
Opening an unavailable file

Errors represent irrecoverable conditions such as Java virtual machine (JVM) running out of memory,
memory leaks, stack overflow errors, library incompatibility, infinite recursion, etc. 
Errors are usually beyond the control of the programmer, and we should not try to handle errors.

Checked Exceptions: Checked exceptions are called compile-time exceptions because these exceptions are checked at compile-time by the compiler. 
Unchecked Exceptions: The unchecked exceptions are just opposite to the checked exceptions. 
The compiler will not check these exceptions at compile time. In simple words, if a program throws an unchecked exception, 
and even if we didnâ€™t handle or declare it, the program would not give a compilation error.

The advantages of Exception Handling in Java are as follows:
Provision to Complete Program Execution
Easy Identification of Program Code and Error-Handling Code
Propagation of Errors
Meaningful Error Reporting
Identifying Error Types

//IMPORTANT:
Your code can catch this exception (using catch block) and handle it in some rational manner. 
System-generated exceptions are automatically thrown by the Java run-time system. 
To manually throw an exception, use the keyword throw. 
Any exception that is thrown out of a method must be specified as such by a throws clause. 
Any code that absolutely must be executed after a try block completes is put in a finally block.

Built-in exceptions are the exceptions that are available in Java libraries. 
These exceptions are suitable to explain certain error situations. 
Below is the list of important built-in exceptions in Java:
ArithmeticException: It is thrown when an exceptional condition has occurred in an arithmetic operation.
ArrayIndexOutOfBoundsException: It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.
ClassNotFoundException: This Exception is raised when we try to access a class whose definition is not found
FileNotFoundException: This Exception is raised when a file is not accessible or does not open.
IOException: It is thrown when an input-output operation failed or interrupted
InterruptedException: It is thrown when a thread is waiting, sleeping, or doing some processing, and it is interrupted.
NoSuchFieldException: It is thrown when a class does not contain the field (or variable) specified
NoSuchMethodException: It is thrown when accessing a method that is not found.
NullPointerException: This exception is raised when referring to the members of a null object. Null represents nothing
NumberFormatException: This exception is raised when a method could not convert a string into a numeric format.
RuntimeException: This represents an exception that occurs during runtime.
StringIndexOutOfBoundsException: It is thrown by String class methods to indicate that an index is either negative or greater than the size of the string
IllegalArgumentException: This exception will throw the error or error statement when the method receives an argument which is not accurately fit to the given relation or condition. It comes under the unchecked exception. 
IllegalStateException: This exception will throw an error or error message when the method is not accessed for the particular operation in the application. It comes under the unchecked exception.


The throw keyword in Java is used: 
To explicitly throw an exception from a method or any block of code.
Checked Exceptions cannot be propagated using throw only. 
Followed by an instance
Using within a method
Cannot throw multiple exceptions
We can throw either checked or unchecked exception. The throw keyword is mainly used to throw custom exceptions. 
catch(NullPointerException e)
        {
            System.out.println("Caught inside fun().");
            throw e; // rethrowing the exception
        }

We can use throws keyword to delegate the responsibility of exception handling to the caller (It may be a method or JVM) 
then caller method is responsible to handle that exception.
Important points to remember about throws keyword: 
throws keyword is required only for checked exception and usage of throws keyword for unchecked exception is meaningless.
throws keyword is required only to convince compiler and usage of throws keyword does not prevent abnormal termination of program.
By the help of throws keyword we can provide information to the caller of the method about the exception.
Used to declare an Exception
Checked Exceptions can be propagated
Followed by a class
Used with a method Signature
Can declare multiple exceptions
public static void main(String[] args)throws InterruptedException{
    //...
}

Gradle:
 * Build tools & dependency management
 * Maintainig library manually is nightmare
 * Gradel manages library dependencies
 * Build distributable package
 * Spring Boot generates initial script

 Concurrency = Multitasking

Collections Interface: List, Set, Queue and Map

Collections:
    List:
        * Cares aboutwich position each object is in 
        * Elements can be added in by specifying position - where should it be added in
        * If element is added without specifying position - it is added at the end
        ArrayList:
            * Insertion and Deletion are slower compared to LinkedList
            * almost constant time - access
            * Access to the elements by is potition this is better
        LinkedList:
            * Elements are doubly linked - forward and backward - to on
            * Iteration is slower than ArrayList
            * Faster Insertion and Deletion
        Vector:
            * Thread safe - Synchronized Methods
            * almost constant time - access
    Set:
        * Unique things only - Does not allow duplication
        * If obj1.equals(obj2) then only one of them can be in the Set
        HashSet:
            // A,X,B
            // X,A,B
            * underodere, unsorted - iterates in random order
            * uses hashcode()
        LinkedHashSet:
            // A,X,B
            // A,X,B
            * ordered - iterates in order of insertion
            * unsorted
            * uses hashcode()
        TreeSet:
            // A,C,B
            // A,B,C
            * 3,5,7
            * sorted - natural order
            * implements NavigableSet
    Queue:
        * Arranged in order of processing - A to-do list for example
        * Queue interface extends Collection. So, it supports all Collection Methods
        PriorityQueue:
            * sorted - natural order
    Map:
        HashMap:
            * unsorted, unordered
            * key's hascode() is used
        HashTable:
            * Synchronized - Thread Safe - version of HashMap
            * unsorted, unordered
            * key's hascode() is used
            * HashMap allows a key with null value. Hastable doesn't
        LinkedHashMap:
            * insertion order is maintained (optionally can maintain access well)
            * slower insertion and deletion
            * faster iteration
        TreeMap:
            * sorted order is maintained
            * implements NavigableMap

Thread states:
    * NEW
    * RUNNABLE
    * RUNNING
    * BLOCKED/WAINTING
    * TERMINATED/DEAD